## MK

~~~~
Repo names:
MATCH (n:Repository) RETURN n.r_name

Last 10 commits :
MATCH (n:Commits) RETURN n.hdx ORDER BY n.commit_date DESC LIMIT 10

Total number of commits made by each developer, sorted on increasing order.
MATCH (n:Developer)-[:commits]-(Commits)  RETURN  n.name,count(*) ORDER BY count(*)

Creater of the files:
MATCH (n:Developer)-[:creates]-(Commits)-[:modifies]-(File)  RETURN  n.name,File.filename

Bus Factor:
MATCH (n:Developer) return count(*)

Length of the commit messages in increasing order:
MATCH (n:Developer)-[:commits]-(Commits)  RETURN  (n.name),(sum(length(Commits.message))) ORDER BY sum(length(Commits.message))

Avarage message length:
MATCH (n:Developer)-[:commits]-(Commits)  RETURN  (avg(length(Commits.message)))

Last committed person and commit id
MATCH (n:Developer)-[:creates|:commits]-(Commits) WHERE ALL(x IN nodes(Commits) WHERE x>Commits.commit_date) RETURN n.name,Commits.hdx

Total number of n:Developer who create commits/files
MATCH (n:Developer)-[:creates]-(a)  RETURN  count(DISTINCT n.name)

MATCH (n:Developer)-[:creates]-(a)-[:modifies]-file  RETURN n.name,file.filename ORDER BY n.name

Given a month count commits per each day :
for i=1:12
MATCH (n:Commits) WHERE n.commit_month=i return count(n.commit_month),n.commit_day
~~~~


## PG


* Return last 25 commits irrespective of repos


MATCH (a)-[:COMMIT]->(b)-[:BELONGS_TO]->(c) RETURN a,b,c LIMIT 25


* Return the summary, commit time, and the committer of the last 10 commits to the repo "hakyll"

START myrepo=node:Repository(name='hakyll')
MATCH (committer)<-[:COMMITTED_BY]-(commit)-[:BELONGS_TO]->(myrepo)
WITH commit, committer
RETURN collect(commit.summary) AS commits, commit.ctime as time, collect(committer.name) as committers
ORDER BY (commit.ctime) DESC
LIMIT 10;


* Get the commits belonging to repo `hakyll` on the date `2012-02-06`

MATCH (c)
WHERE c.date='2012-02-06'
return '2012-02-06', count(c);



* Wild card matching -- return all commits in the month of 2012-02

MATCH (c)
WITH c as c, '2012-02-.*' as pat
WHERE c.date =~ pat
return pat, count(c);


* The same as above for a particular repo

START myrepo=node:Repository(name="hakyll")
MATCH (c)
WITH c as c, '2012-02-.*' as pat
WHERE c.date =~ pat
return pat, count(c);

* return the date and number of commits for all days of an year


START myrepo=node:Repository(name="hakyll")
MATCH (c)
WITH c as c, '2012-.*' as pat
WHERE c.date =~ pat
return c.date as date, count(c)

* Return the very last day of commit for the repo

START myrepo=node:Repository(name="hakyll")
MATCH(commit)
WITH commit
WHERE HAS(commit.date)
RETURN commit.date as date
ORDER BY commit.ctime DESC
LIMIT 1

* Return the very first day of commit for the repo

START myrepo=node:Repository(name="hakyll")
MATCH(commit)
WITH commit
WHERE HAS(commit.date)
RETURN commit.date as date
ORDER BY commit.ctime
LIMIT 1


* Total number of commits in the repository

START myrepo=node:Repository(name="hakyll")
MATCH (commit)-[:BELONGS_TO]->myrepo
WITH commit
WHERE HAS(commit.hexsha)
RETURN count(commit) as total_commits

* Total number of committers in the repository

START myrepo=node:Repository(name="hakyll")
MATCH (committer)<-[:COMMITTED_BY]-(commit)-[:BELONGS_TO]->myrepo
WITH commit, committer
WHERE HAS(commit.hexsha)
RETURN count(DISTINCT committer.name)


* All the committers

START myrepo=node:Repository(name="hakyll")
MATCH (committer)<-[:COMMITTED_BY]-(commit)-[:BELONGS_TO]->myrepo
WITH commit, committer
WHERE HAS(commit.hexsha)
RETURN DISTINCT committer.name, committer.email


* `n` most active committers

START myrepo=node:Repository(name="hakyll")
MATCH (committer)<-[COMMITTED_BY]-(commit)-[:BELONGS_TO]->myrepo
with commit, committer
WHERE HAS(committer.name)
RETURN DISTINCT committer.name, COUNT(commit)
ORDER BY COUNT(commit) DESC
LIMIT 5

* Commits with the largest number of files modified

START myrepo=node:Repository(name="hakyll")
MATCH (file)-[:MODIFIED_BY]->(commit)-[:BELONGS_TO]->myrepo
WITH file, commit
WHERE HAS(commit.hexsha)
RETURN DISTINCT commit.hexsha, COUNT(commit)
ORDER By COUNT(commit) DESC
LIMIT 5

* List top file types (this has duplicates)

START myrepo=node:Repository(name="hakyll")
MATCH (c)<-[:MODIFIED_BY]-(a)-[:IS_A]->(b)
WITH a,b,c
WHERE HAS(a.path)
RETURN DISTINCT b.name, count(b)
ORDER BY count(b) DESC

* List top file types (count only once)

START myrepo=node:Repository(name="hakyll")
MATCH (a)-[:IS_A]->(b)
WITH a,b
WHERE HAS(a.path)
RETURN DISTINCT b.name, count(b)
ORDER BY count(b) DESC


* Widest skillset

START myrepo=node:Repository(name="hakyll")
MATCH (committer)<-[:COMMITTED_BY]-(commit)-[:BELONGS_TO]->myrepo
WITH commit, committer
MATCH (sourcetype)<-[:IS_A]-(file)<-[:MODIFIED_BY]-(commit)
RETURN committer, count(sourcetype)


* Who has worked the longest on this codebase.

START myrepo=node:Repository(name="hakyll")
MATCH (committer)<-[COMMITTED_BY]-(commit)-[:BELONGS_TO]->myrepo
WITH committer, commit
RETURN committer.name, commit.date
ORDER BY commit.ctime
LIMIT 1

* List of commits with tags

START myrepo=node:Repository(name="hakyll")
MATCH (commit)<-[:BELONGS_TO]->myrepo
WHERE HAS(commit.tag)
RETURN commit.hexsha, commit.date, commit.tag
